package $!{package.ServiceImpl};

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.ObjectUtil;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.cjc.dev.common.bean.DevServiceException;
import com.google.common.collect.Lists;
import org.springblade.core.mp.support.Condition;
import org.springblade.core.mp.support.Query;
import org.springblade.core.tool.utils.BeanUtil;
import org.springblade.core.tool.utils.SpringUtil;
import org.springframework.beans.factory.annotation.Autowired;
#set($voPackage=$package.Entity.replace("entity","dto"))
import $!{dtoPackage}.$!{entity}DTO;
import $!{dtoPackage}.$!{entity}ExcelDTO;
import $!{dtoPackage}.$!{entity}ImportDTO;
import $!{package.Entity}.$!{entity};
import $!{package.Mapper}.$!{table.mapperName};
import $!{package.Service}.$!{table.serviceName};
import $!{superServiceImplClassPackage};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import tech.scedu.micro.template.util.DevExcelUtils;
import tech.scedu.micro.template.util.IdService;
import tech.scedu.micro.template.util.page.IPageToSpringPageVO;
import tech.scedu.micro.template.util.page.SpringPageVO;

import java.io.File;
import java.util.*;

import static java.time.LocalDateTime.now;
import static org.springblade.common.constant.CommonConstant.TENANT_ID;
import static org.springblade.core.tool.utils.Func.isBlank;
import static org.springblade.core.tool.utils.Func.toStrList;
import static tech.scedu.micro.template.enums.CheckEnum.EENTITY_TYPE;

/**
 * $!{table.comment} 服务实现类
 *
 * @author codeGenerator
 * @since $!{date}
 */
@Slf4j
@Service
#if($!{kotlin})
open class $!{table.serviceImplName} : $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}>(), $!{table.serviceName} {

}
#else
public class $!{table.serviceImplName} extends $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}> implements $!{table.serviceName} {
    @Autowired
    private IdService idService;

	private String fileName = "$!{table.comment}模板.xlsx";


	/**
	 * 查询详情
	 *
	 * @param $!{table.entityPath} entity
	 * @return 详情
	 */
	@Override
	public $!{entity} detail($!{entity} $!{table.entityPath}) {

		return this.getOne(Condition.getQueryWrapper($!{table.entityPath}));
	}

    /**
     * 分页查询
     *
     * @param $!{table.entityPath}DTO 分页条件
     * @return 分页列表
     */
    @Override
    public SpringPageVO<$!{entity}> page($!{entity}DTO $!{table.entityPath}DTO){
        $!{entity} $!{table.entityPath} = BeanUtil.copy($!{table.entityPath}DTO, $!{entity}.class);
        //开发者根据业务需求在wrapper增加查询条件,例如高级查询、是否删除等...
        QueryWrapper<$!{entity}> wrapper = Condition.getQueryWrapper($!{table.entityPath});
        IPage<$!{entity}> page = this.page(Condition.getPage(getQuery($!{table.entityPath}DTO)), wrapper);

        return new IPageToSpringPageVO<$!{entity}>().apply(page);
    }

    /**
     * 不分页查询列表
     *
     * @param $!{table.entityPath} 查询条件
     * @return 列表
     */
    @Override
    public List<$!{entity}> selectList($!{entity} $!{table.entityPath}){

        return this.list(Condition.getQueryWrapper($!{table.entityPath}));
    }

    /**
     * 新增
     *
     * @param $!{table.entityPath} 实体
     */
    @Override
    public void insert($!{entity} $!{table.entityPath}){
        init($!{table.entityPath}.getClass());
        boolean isSuccess = this.save($!{table.entityPath});
        if (!isSuccess) {
            throw new DevServiceException("保存失败");
        }
    }

    /**
     * 修改
     *
     * @param $!{table.entityPath} entity
     */
    @Override
    public void updated($!{entity} $!{table.entityPath}){
        Optional.ofNullable($!{table.entityPath}.getId()).orElseThrow(() -> new DevServiceException("id不能为空"));
        init($!{table.entityPath}.getClass());
        boolean isSuccess = this.updateById($!{table.entityPath});
        if (!isSuccess) {
            throw new DevServiceException("修改失败");
        }
    }

    /**
     * 删除
     *
     * @param ids  id集合
     */
    @Override
    public void removes(String ids){
        Optional.ofNullable(ids).orElseThrow(() -> new DevServiceException("id不能为空"));
        boolean isSuccess = this.removeByIds(toStrList(ids));
        if (!isSuccess) {
            throw new DevServiceException("删除失败");
        }
    }

	/**
	 * 上传excel
	 *
	 * @param file     文件
	 * @return true-上传成功,false-上传失败
	 */
	@Override
	public boolean uploadExcel(MultipartFile file) {

		return DevExcelUtils.uploadExcel(file, TENANT_ID, fileName);
	}

	/**
	 * 返回excel可导出的字段
	 *
	 * @return 所有可导出字段
	 */
	@Override
	public Map<String, Object> getField() {
		Map<String, Object> map = new LinkedHashMap<>(32);
		/*
			开发者需要在 Map 中添加可导出的字段
			格式:map.put("实体字段名称","实体字段对应的中文描述(即excel上表头名称)")
		 */

		return map;
	}

	/**
	 * 获取系统字段和表头字段和已经匹配的关系
	 *
	 * @return 匹配结果
	 */
	@Override
	public Map<String, Object> getSysFieldAndExcelField() {

		Map<String, Object> returnMap = new LinkedHashMap<>(16);
		//存放已经匹配成功的字段
		List<Map<String, Object>> matchFieldList = new ArrayList<>(16);
		//查询系统字段
		/*
			查询系统字段:需要开发者自己根据taskId进行查询,默认存放在syn_task_field_config
			示例:List<Map<String, Object>> dataBaseFieldList = synTaskFieldConfigService.selectCampusConfig("3");
			其他代码无需更改
		 */
		List<Map<String, Object>> dataBaseFieldList= null;
		List<Map<String, Object>> returnDataBaseFieldList = ObjectUtil.cloneByStream(dataBaseFieldList);
		returnMap.put("dbFieldList", returnDataBaseFieldList);
		//获取表头字段
		List<String> firstLineStrList = DevExcelUtils.getFirstLineList(new File(DevExcelUtils.getPath(TENANT_ID, fileName)));
		DevExcelUtils.getMatchList(returnMap, matchFieldList, dataBaseFieldList, firstLineStrList);

	    return returnMap;
	}

	/**
	 * 导出excel
	 *
	 * @param $!{table.entityPath}ExcelDTO 需要导出的学生列表
	 */
	@Override
	public void export($!{entity}ExcelDTO $!{table.entityPath}ExcelDTO) {
		/*
			如果导出数据涉及到字典值的转换,参考服务中台-学生导出接口
			根据不同导出规则(全部数据、条件检索的数据、勾选数据),需要开发者添加条件查询
		 */

		List<$!{entity}>list;
		$!{entity} $!{table.entityPath} = $!{table.entityPath}ExcelDTO.getFormInline();
		Optional.ofNullable($!{table.entityPath}).orElse(new $!{entity}());
		##LambdaQueryWrapper<$!{entity}> wrapper = getWrapper($!{table.entityPath});

		switch ($!{table.entityPath}ExcelDTO.getDataRange()) {
			case "1":
				//全部数据

			case "2":
				//条件检索的数据,根据业务需求增加查询条件
				list = this.list(Condition.getQueryWrapper($!{table.entityPath}));
				break;

			case "3":
				//勾选数据
				String ids = $!{table.entityPath}ExcelDTO.getChoiceDataIds();
				if (isBlank(ids)) {
					throw new DevServiceException("勾选的数据不能为空");
				}
				LambdaQueryWrapper<$!{entity}> lambdaQueryWrapper = new LambdaQueryWrapper<>();
				lambdaQueryWrapper.in($!{entity}::getId,toStrList(ids));
				list = this.list(lambdaQueryWrapper);
				break;
			default:
				throw new DevServiceException("无法识别的导出规则");
		}
		String exportField = $!{table.entityPath}ExcelDTO.getExportField();
		if (isBlank(exportField)) {
			//选择的导出字段为空,则按照自定义字段
			exportField = getExportField();
		}
		DevExcelUtils.exportExcel(EENTITY_TYPE,DevExcelUtils.getMap(exportField), list, $!{table.entityPath}ExcelDTO.getFileName());
	}

	/**
	 * 导入excel,根据规则写入数据库
	 *
	 * @param importDTO excel导入实体
	 */
	@Override
	public Map<String, Object> importExcel($!{entity}ImportDTO importDTO) {
		/*
			代码模板导入接口-没有做异步处理和错误数据的下载,如有需要请参考服务中台-学生导入
		 */
		//默认从第二行开始读取
		int headerLine = Integer.parseInt(Optional.ofNullable(importDTO.getHeaderLine()).orElse("1"));
		//解析excel的数据
		List<Map<Object, Object>> majorInfoList = DevExcelUtils.getExcelResolverFieldList(importDTO.getMatchFieldList()
		, new File(DevExcelUtils.getPath(TENANT_ID, fileName)), headerLine, getAllFields());
		if (CollUtil.isEmpty(majorInfoList)) {
			throw new DevServiceException("导入数据不能为空");
		}
		$!{entity}ServiceImpl $!{table.entityPath}ServiceImpl = SpringUtil.getBean($!{entity}ServiceImpl.class);

		return importInfo(majorInfoList,importDTO.getRuleNum());
	}

	##/**
	## * 创建查询条件Wrapper
	## *
	## * @param $!{table.entityPath} 实体
	## * @return wrapper
	## */
	##private LambdaQueryWrapper<$!{entity}> getWrapper($!{entity} $!{table.entityPath}) {
	##	LambdaQueryWrapper<$!{entity}> wrapper = new LambdaQueryWrapper<>();
	##	/*
	##		根据页面的条件查询创建
	##		示例:
	##		if (isNotBlank(keyId) {
	##			wrapper.eq(EduOtherUserInfo::getKeyId,keyId);
	##		}
	##		....
	##	 */
    ##
	##	return wrapper;
	##}

    /**
     * 组装查询条件
     *
     * @param $!{table.entityPath}DTO 实体
     * @return 查询条件
     */
    private Query getQuery($!{entity}DTO $!{table.entityPath}DTO) {
        Query query = new Query();
        query.setCurrent($!{table.entityPath}DTO.getPageIndex());
        query.setSize($!{table.entityPath}DTO.getPageSize());
        return query;
    }

	/**
	 * 导出自定义字段
	 *
	 * @return 自定义字段
	 */
	private String getExportField() {
		/*
			字段顺序与导出的Excel表头顺序一致
			多个字段逗号分隔	格式:实体字段对应的中文描述(即excel上表头名称):实体字段名称
			示例:  return: "姓名:name,性别:sex,账号:keyId,民族:nation"
		 */
		return "";
	}

	/**
	 * 获取所有属性的字段名称
	 *
	 * @return
	 */
	private List<Object> getAllFields() {
		/*
			元素放入的顺序与Excel模板的表头的字段顺序要保持一致
			示例: Lists.newArrayList("id","name","age")

		 */
		return Lists.newArrayList();
	}

	/**
	 * 执行导入具体逻辑
	 *
	 * @param majorInfoList excel解析的数据
	 * @param repeat        导入规则
	 * @return map
	 */
	private Map<String, Object> importInfo(List<Map<Object, Object>> majorInfoList, String repeat) {
		/*
			通用的导入逻辑,根据业务需求定制化开发,其他代码无需更改
			需要根据具体业务需求进行修改,例如:插入前需检验该记录是否存在、需要检验个别字段抛出异常
		 */
		if(CollUtil.isEmpty(majorInfoList)){
			throw new DevServiceException("导入数据不能为空");
		}
		//已新增
		Integer newInsertNum = 0;
		//已成功
		Integer successNum = 0;
		//失败数
		Integer failNum = 0;
		//已覆盖更新
		Integer updateNum = 0;
		//新增/覆盖的错误信息
		Map<String, Object> returnMap = new HashMap<>(5);
		//存放失败数据的list
		List<Map<Object, Object>> failDataList = new ArrayList<>(10);
		$!{entity} newMajorInfo = new $!{entity}();
		for (Map<Object, Object> majorInfo : majorInfoList) {
			try {
				DevExcelUtils.mapToBean(majorInfo, newMajorInfo);
                init(newMajorInfo.getClass());
                /*
                    根据唯一标识验证该条记录是否存在,根据查询条件自行修改
                    示例:EduOtherUserInfo entity = this.getOne(new QueryWrapper<EduOtherUserInfo>().eq("key_id" , keyId).eq("tenant_id" , tenantId));
                 */
                $!{entity} entity = null;
				if (newMajorInfo.getId() != null) {
					//多条记录使用的是同一个对象,需要重新设置id
					newMajorInfo.setId(idService.nextStrId());
				}
				if (entity == null) {
					//手动设置id
					newMajorInfo.setId(idService.nextStrId());
					this.save(newMajorInfo);
					successNum++;
					newInsertNum++;
				} else if ("1".equals(repeat)) {
					//覆盖重复数据
					newMajorInfo.setId(entity.getId());
					this.saveOrUpdate(newMajorInfo);
					updateNum++;
					successNum++;
				} else {
					//跳过重复数据
					continue;
				}
			} catch (Exception e) {
				//添加导入失败的条数、原因
				failNum++;
				majorInfo.put("failReason" , e.getMessage());
				failDataList.add(majorInfo);
			}
		}
		if (failNum > 0) {
			log.info("$!{table.comment}Excel导入的错误数据,参数:{}" , JSONObject.toJSONString(failDataList));
		}
		returnMap.put("successNum" , successNum);
		returnMap.put("newInsertNum" , newInsertNum);
		returnMap.put("updateNum" , updateNum);
		returnMap.put("failNum" , failNum);
		log.info("$!{table.comment}Excel导入完成,参数:{}" , JSONObject.toJSONString(returnMap));

		return returnMap;
	}

    /**
     * 时间初始化
     *
     * @param entityClass 对象Class
     */
    private void init(Class<?> entityClass) {
        $!{entity} entity = BeanUtil.newInstance(entityClass);
        if (isBlank(entity.getId())) {
            entity.setUpdateTime(now());
            entity.setCreateTime(now());
        }
        entity.setUpdateTime(now());
    }
}
#end
